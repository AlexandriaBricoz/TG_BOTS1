import json
import asyncio
import traceback

from aiogram import types, F
from aiogram.fsm.context import FSMContext

from loader import dp, loop, bot

from data.config import *
from utils.database import *

from keyboards.user import *


# –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ—á–∫—É –Ω–∏–∂–µ
from aiogram.dispatcher import FSMContext

from aiogram.dispatcher.filters.state import StatesGroup, State


class TopWorkersState(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()


@dp.message_handler(lambda message: message.text == 'üëë –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–æ–≤')
async def message_handler_top_workers(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer("–° –∫–∞–∫—É—é –ø–æ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø. –ù–∞–ø–∏—à–∏—Ç–µ —Å –∫–∞–∫–æ–π –¥–∞—Ç—ã(—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")
    await TopWorkersState.waiting_for_start_date.set()


@dp.message_handler(state=TopWorkersState.waiting_for_start_date)
async def process_start_date(message: types.Message, state: FSMContext):
    start_date = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.datetime.strptime(start_date, '%Y-%m-%d')
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å–Ω–æ–≤–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")
        return

    await state.update_data(start_date=start_date)

    await message.answer("–ü–æ –∫–∞–∫—É—é (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")
    await TopWorkersState.waiting_for_end_date.set()


@dp.message_handler(state=TopWorkersState.waiting_for_end_date)
async def process_end_date(message: types.Message, state: FSMContext):
    end_date = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.datetime.strptime(end_date, '%Y-%m-%d')
    except ValueError:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD):")
        return

    data = await state.get_data()
    start_date = data.get('start_date')

    top_users = await get_top_users_with_date_range(start_date, end_date)

    message_text = '\n'.join(
        (f'{num + 1}. @{username} - {reports_count}' for num, (username, reports_count) in enumerate(top_users))
    )

    if not message_text: message_text = 'ü´§ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç'

    await state.finish()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(message_text)








